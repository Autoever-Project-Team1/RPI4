
n32_uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c10  08002c10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08002c24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002c24  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a50e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001905  00000000  00000000  0002a58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e3  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001881c  00000000  00000000  0002ce83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a91c  00000000  00000000  0004569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad03  00000000  00000000  0004ffbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023b0  00000000  00000000  000eacc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000ed070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002b9c 	.word	0x08002b9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002b9c 	.word	0x08002b9c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fa58 	bl	8000982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f81d 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8d1 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f89f 	bl	800061c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f86d 	bl	80005bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char str[]="<11111111>";
 80004e2:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x40>)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e8:	c303      	stmia	r3!, {r0, r1}
 80004ea:	801a      	strh	r2, [r3, #0]
 80004ec:	3302      	adds	r3, #2
 80004ee:	0c12      	lsrs	r2, r2, #16
 80004f0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1,str, sizeof(str)-1, 100);
 80004f2:	1d39      	adds	r1, r7, #4
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	220a      	movs	r2, #10
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x44>)
 80004fa:	f001 fe29 	bl	8002150 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000502:	f000 fab3 	bl	8000a6c <HAL_Delay>
	  HAL_UART_Transmit(&huart1,str, sizeof(str)-1, 100);
 8000506:	e7f4      	b.n	80004f2 <main+0x2a>
 8000508:	08002bb4 	.word	0x08002bb4
 800050c:	20000028 	.word	0x20000028

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fb0f 	bl	8002b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f000 fd4b 	bl	8000fd0 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f8e6 	bl	8000710 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f000 fd26 	bl	8000f94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <SystemClock_Config+0xa8>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <SystemClock_Config+0xa8>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000568:	23a0      	movs	r3, #160	; 0xa0
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd81 	bl	800107c <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000580:	f000 f8c6 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2101      	movs	r1, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f9cf 	bl	8001940 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005a8:	f000 f8b2 	bl	8000710 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ac:	f001 fd72 	bl	8002094 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005b0:	bf00      	nop
 80005b2:	3758      	adds	r7, #88	; 0x58
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <MX_USART1_UART_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_USART1_UART_Init+0x58>)
 8000600:	f001 fd58 	bl	80020b4 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800060a:	f000 f881 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028
 8000618:	40013800 	.word	0x40013800

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_USART2_UART_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000660:	f001 fd28 	bl	80020b4 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f851 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000b0 	.word	0x200000b0
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_GPIO_Init+0x8c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_GPIO_Init+0x8c>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_GPIO_Init+0x8c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x90>)
 80006e0:	f000 fc40 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006e4:	2308      	movs	r3, #8
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x90>)
 80006fc:	f000 fac0 	bl	8000c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	48000400 	.word	0x48000400

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	2234      	movs	r2, #52	; 0x34
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f002 f9dc 	bl	8002b42 <memset>
  if(huart->Instance==USART1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a47      	ldr	r2, [pc, #284]	; (80008ac <HAL_UART_MspInit+0x148>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d138      	bne.n	8000806 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 faf1 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007ac:	f7ff ffb0 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b4:	4a3e      	ldr	r2, [pc, #248]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6613      	str	r3, [r2, #96]	; 0x60
 80007bc:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	4a38      	ldr	r2, [pc, #224]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007f2:	2307      	movs	r3, #7
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 fa3e 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000804:	e04d      	b.n	80008a2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <HAL_UART_MspInit+0x150>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d148      	bne.n	80008a2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fab3 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000828:	f7ff ff72 	bl	8000710 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	6593      	str	r3, [r2, #88]	; 0x58
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x14c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800085c:	2304      	movs	r3, #4
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086c:	2307      	movs	r3, #7
 800086e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f000 fa01 	bl	8000c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800087e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000890:	2303      	movs	r3, #3
 8000892:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 f9ef 	bl	8000c80 <HAL_GPIO_Init>
}
 80008a2:	bf00      	nop
 80008a4:	3760      	adds	r7, #96	; 0x60
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40004400 	.word	0x40004400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f892 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 f8f9 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fdb1 	bl	80004c8 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000974:	08002c18 	.word	0x08002c18
  ldr r2, =_sbss
 8000978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800097c:	2000013c 	.word	0x2000013c

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>

08000982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f943 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f80e 	bl	80009b4 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a4:	f7ff feba 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_InitTick+0x6c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d023      	beq.n	8000a10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_InitTick+0x70>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_InitTick+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f941 	bl	8000c66 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10f      	bne.n	8000a0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d809      	bhi.n	8000a04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f919 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_InitTick+0x74>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e007      	b.n	8000a14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	e001      	b.n	8000a14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000138 	.word	0x20000138

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000138 	.word	0x20000138

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e14e      	b.n	8000f2e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8140 	beq.w	8000f28 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d005      	beq.n	8000cc0 <HAL_GPIO_Init+0x40>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d130      	bne.n	8000d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 0201 	and.w	r2, r3, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d017      	beq.n	8000d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d123      	bne.n	8000db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f003 0307 	and.w	r3, r3, #7
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0203 	and.w	r2, r3, #3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 809a 	beq.w	8000f28 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	4b55      	ldr	r3, [pc, #340]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df8:	4a54      	ldr	r2, [pc, #336]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2cc>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e0c:	4a50      	ldr	r2, [pc, #320]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e36:	d013      	beq.n	8000e60 <HAL_GPIO_Init+0x1e0>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_GPIO_Init+0x2d4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d00d      	beq.n	8000e5c <HAL_GPIO_Init+0x1dc>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <HAL_GPIO_Init+0x2d8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x1d8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a44      	ldr	r2, [pc, #272]	; (8000f5c <HAL_GPIO_Init+0x2dc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_GPIO_Init+0x1d4>
 8000e50:	2303      	movs	r3, #3
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e54:	2307      	movs	r3, #7
 8000e56:	e004      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_GPIO_Init+0x1e2>
 8000e60:	2300      	movs	r3, #0
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e72:	4937      	ldr	r1, [pc, #220]	; (8000f50 <HAL_GPIO_Init+0x2d0>)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ece:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_GPIO_Init+0x2e0>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f47f aea9 	bne.w	8000c90 <HAL_GPIO_Init+0x10>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	48000c00 	.word	0x48000c00
 8000f60:	40010400 	.word	0x40010400

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
 8000f70:	4613      	mov	r3, r2
 8000f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000

08000fb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fde:	d130      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fec:	d038      	beq.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2232      	movs	r2, #50	; 0x32
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9b      	lsrs	r3, r3, #18
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001014:	e002      	b.n	800101c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3b01      	subs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001028:	d102      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x60>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f2      	bne.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103c:	d110      	bne.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e00f      	b.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800104a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104e:	d007      	beq.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001058:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40007000 	.word	0x40007000
 8001074:	20000000 	.word	0x20000000
 8001078:	431bde83 	.word	0x431bde83

0800107c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f000 bc4f 	b.w	800192e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001090:	4b97      	ldr	r3, [pc, #604]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109a:	4b95      	ldr	r3, [pc, #596]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80e6 	beq.w	800127e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_RCC_OscConfig+0x4c>
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	f040 808d 	bne.w	80011da <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	f040 8089 	bne.w	80011da <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c8:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_RCC_OscConfig+0x66>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f000 bc26 	b.w	800192e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e6:	4b82      	ldr	r3, [pc, #520]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <HAL_RCC_OscConfig+0x80>
 80010f2:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010fa:	e005      	b.n	8001108 <HAL_RCC_OscConfig+0x8c>
 80010fc:	4b7c      	ldr	r3, [pc, #496]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001108:	4293      	cmp	r3, r2
 800110a:	d224      	bcs.n	8001156 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fdd9 	bl	8001cc8 <RCC_SetFlashLatencyFromMSIRange>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	f000 bc06 	b.w	800192e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a72      	ldr	r2, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	496d      	ldr	r1, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	4968      	ldr	r1, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e025      	b.n	80011a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001156:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4960      	ldr	r1, [pc, #384]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001170:	4313      	orrs	r3, r2
 8001172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001174:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	495b      	ldr	r1, [pc, #364]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fd98 	bl	8001cc8 <RCC_SetFlashLatencyFromMSIRange>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e3c5      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011a2:	f000 fccd 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4950      	ldr	r1, [pc, #320]	; (80012f4 <HAL_RCC_OscConfig+0x278>)
 80011b4:	5ccb      	ldrb	r3, [r1, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_RCC_OscConfig+0x27c>)
 80011c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <HAL_RCC_OscConfig+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fbf4 	bl	80009b4 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d052      	beq.n	800127c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	e3a9      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d032      	beq.n	8001248 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc31 	bl	8000a54 <HAL_GetTick>
 80011f2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc2d 	bl	8000a54 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e392      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	4930      	ldr	r1, [pc, #192]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	492b      	ldr	r1, [pc, #172]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
 8001246:	e01a      	b.n	800127e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001254:	f7ff fbfe 	bl	8000a54 <HAL_GetTick>
 8001258:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125c:	f7ff fbfa 	bl	8000a54 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e35f      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1e0>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d073      	beq.n	8001372 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2b08      	cmp	r3, #8
 800128e:	d005      	beq.n	800129c <HAL_RCC_OscConfig+0x220>
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	2b0c      	cmp	r3, #12
 8001294:	d10e      	bne.n	80012b4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d10b      	bne.n	80012b4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d063      	beq.n	8001370 <HAL_RCC_OscConfig+0x2f4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d15f      	bne.n	8001370 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e33c      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d106      	bne.n	80012cc <HAL_RCC_OscConfig+0x250>
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e025      	b.n	8001318 <HAL_RCC_OscConfig+0x29c>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d114      	bne.n	8001300 <HAL_RCC_OscConfig+0x284>
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a02      	ldr	r2, [pc, #8]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x29c>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	08002bc0 	.word	0x08002bc0
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000004 	.word	0x20000004
 8001300:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a8e      	ldr	r2, [pc, #568]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a8b      	ldr	r2, [pc, #556]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fb98 	bl	8000a54 <HAL_GetTick>
 8001324:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fb94 	bl	8000a54 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e2f9      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	4b81      	ldr	r3, [pc, #516]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x2ac>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb84 	bl	8000a54 <HAL_GetTick>
 800134c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb80 	bl	8000a54 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e2e5      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	4b77      	ldr	r3, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x2d4>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d060      	beq.n	8001440 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x314>
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d119      	bne.n	80013be <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d116      	bne.n	80013be <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001390:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x32c>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e2c2      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	4962      	ldr	r1, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013bc:	e040      	b.n	8001440 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d023      	beq.n	800140e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb3f 	bl	8000a54 <HAL_GetTick>
 80013d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fb3b 	bl	8000a54 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e2a0      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	4b54      	ldr	r3, [pc, #336]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	494e      	ldr	r1, [pc, #312]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e018      	b.n	8001440 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fb1b 	bl	8000a54 <HAL_GetTick>
 800141e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fb17 	bl	8000a54 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e27c      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8082 	beq.w	8001552 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d05f      	beq.n	8001516 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	429a      	cmp	r2, r3
 800146a:	d037      	beq.n	80014dc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e254      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001494:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800149e:	f7ff fad9 	bl	8000a54 <HAL_GetTick>
 80014a2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fad5 	bl	8000a54 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b11      	cmp	r3, #17
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e23a      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ef      	bne.n	80014a6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014cc:	f023 0210 	bic.w	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	491a      	ldr	r1, [pc, #104]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fab2 	bl	8000a54 <HAL_GetTick>
 80014f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff faae 	bl	8000a54 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b11      	cmp	r3, #17
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e213      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ef      	beq.n	80014f4 <HAL_RCC_OscConfig+0x478>
 8001514:	e01d      	b.n	8001552 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fa95 	bl	8000a54 <HAL_GetTick>
 800152a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fa91 	bl	8000a54 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b11      	cmp	r3, #17
 800153a:	d903      	bls.n	8001544 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1f6      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
 8001540:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001544:	4ba9      	ldr	r3, [pc, #676]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ed      	bne.n	800152e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80bd 	beq.w	80016da <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001566:	4ba1      	ldr	r3, [pc, #644]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10e      	bne.n	8001590 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a9d      	ldr	r2, [pc, #628]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b9b      	ldr	r3, [pc, #620]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001590:	4b97      	ldr	r3, [pc, #604]	; (80017f0 <HAL_RCC_OscConfig+0x774>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d118      	bne.n	80015ce <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800159c:	4b94      	ldr	r3, [pc, #592]	; (80017f0 <HAL_RCC_OscConfig+0x774>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a93      	ldr	r2, [pc, #588]	; (80017f0 <HAL_RCC_OscConfig+0x774>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa54 	bl	8000a54 <HAL_GetTick>
 80015ac:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff fa50 	bl	8000a54 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1b5      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c2:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <HAL_RCC_OscConfig+0x774>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d02c      	beq.n	8001634 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80015da:	4b84      	ldr	r3, [pc, #528]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	497f      	ldr	r1, [pc, #508]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d010      	beq.n	8001622 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001600:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	4a79      	ldr	r2, [pc, #484]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001610:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001622:	4b72      	ldr	r3, [pc, #456]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001628:	4a70      	ldr	r2, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001632:	e00f      	b.n	8001654 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001634:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163a:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a68      	ldr	r2, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d016      	beq.n	800168a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff f9fa 	bl	8000a54 <HAL_GetTick>
 8001660:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff f9f6 	bl	8000a54 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e159      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ed      	beq.n	8001664 <HAL_RCC_OscConfig+0x5e8>
 8001688:	e01d      	b.n	80016c6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff f9e3 	bl	8000a54 <HAL_GetTick>
 800168e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f9df 	bl	8000a54 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e142      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ed      	bne.n	8001692 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03c      	beq.n	8001760 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d01c      	beq.n	8001728 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f4:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff f9a9 	bl	8000a54 <HAL_GetTick>
 8001702:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001706:	f7ff f9a5 	bl	8000a54 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e10a      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800171a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ef      	beq.n	8001706 <HAL_RCC_OscConfig+0x68a>
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 800172a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172e:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff f98c 	bl	8000a54 <HAL_GetTick>
 800173c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001740:	f7ff f988 	bl	8000a54 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0ed      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ef      	bne.n	8001740 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80e1 	beq.w	800192c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	2b02      	cmp	r3, #2
 8001770:	f040 80b5 	bne.w	80018de <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	429a      	cmp	r2, r3
 8001786:	d124      	bne.n	80017d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	3b01      	subs	r3, #1
 8001794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d11b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d113      	bne.n	80017d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	3b01      	subs	r3, #1
 80017cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d05f      	beq.n	8001892 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d05a      	beq.n	800188e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_RCC_OscConfig+0x770>)
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e4:	f7ff f936 	bl	8000a54 <HAL_GetTick>
 80017e8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ea:	e00c      	b.n	8001806 <HAL_RCC_OscConfig+0x78a>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f92e 	bl	8000a54 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e093      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x8c0>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001822:	3a01      	subs	r2, #1
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182c:	0212      	lsls	r2, r2, #8
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001834:	0852      	lsrs	r2, r2, #1
 8001836:	3a01      	subs	r2, #1
 8001838:	0552      	lsls	r2, r2, #21
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001840:	0852      	lsrs	r2, r2, #1
 8001842:	3a01      	subs	r2, #1
 8001844:	0652      	lsls	r2, r2, #25
 8001846:	430a      	orrs	r2, r1
 8001848:	493b      	ldr	r1, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a39      	ldr	r2, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001858:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a36      	ldr	r2, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001864:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001866:	f7ff f8f5 	bl	8000a54 <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f8f1 	bl	8000a54 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e056      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188c:	e04e      	b.n	800192c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e04d      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d146      	bne.n	800192c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b6:	f7ff f8cd 	bl	8000a54 <HAL_GetTick>
 80018ba:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f8c9 	bl	8000a54 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e02e      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x842>
 80018dc:	e026      	b.n	800192c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d021      	beq.n	8001928 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 80018ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f8b0 	bl	8000a54 <HAL_GetTick>
 80018f4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f8ac 	bl	8000a54 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e011      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x8bc>)
 800191c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001920:	f023 0303 	bic.w	r3, r3, #3
 8001924:	60d3      	str	r3, [r2, #12]
 8001926:	e001      	b.n	800192c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	f99f808c 	.word	0xf99f808c

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0e7      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4970      	ldr	r1, [pc, #448]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cf      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199c:	429a      	cmp	r2, r3
 800199e:	d908      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4960      	ldr	r1, [pc, #384]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d04c      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d121      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0a6      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e09a      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f6:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e08e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e086      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4943      	ldr	r1, [pc, #268]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a28:	f7ff f814 	bl	8000a54 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f810 	bl	8000a54 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e06e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d208      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	492b      	ldr	r1, [pc, #172]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d210      	bcs.n	8001ab6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0207 	bic.w	r2, r3, #7
 8001a9c:	4923      	ldr	r1, [pc, #140]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e036      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4918      	ldr	r1, [pc, #96]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4910      	ldr	r1, [pc, #64]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af4:	f000 f824 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	490b      	ldr	r1, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ff4b 	bl	80009b4 <HAL_InitTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08002bc0 	.word	0x08002bc0
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b58:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x34>
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d11e      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e004      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d134      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d003      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0xac>
 8001be4:	e005      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be8:	617b      	str	r3, [r7, #20]
      break;
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bee:	617b      	str	r3, [r7, #20]
      break;
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	617b      	str	r3, [r7, #20]
      break;
 8001bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	3301      	adds	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	fb03 f202 	mul.w	r2, r3, r2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	0e5b      	lsrs	r3, r3, #25
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c38:	69bb      	ldr	r3, [r7, #24]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08002bd8 	.word	0x08002bd8
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	007a1200 	.word	0x007a1200

08001c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08002bd0 	.word	0x08002bd0

08001c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca0:	f7ff ffda 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0adb      	lsrs	r3, r3, #11
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08002bd0 	.word	0x08002bd0

08001cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ce0:	f7ff f968 	bl	8000fb4 <HAL_PWREx_GetVoltageRange>
 8001ce4:	6178      	str	r0, [r7, #20]
 8001ce6:	e014      	b.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cec:	4a24      	ldr	r2, [pc, #144]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d00:	f7ff f958 	bl	8000fb4 <HAL_PWREx_GetVoltageRange>
 8001d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d18:	d10b      	bne.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b80      	cmp	r3, #128	; 0x80
 8001d1e:	d919      	bls.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2ba0      	cmp	r3, #160	; 0xa0
 8001d24:	d902      	bls.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d26:	2302      	movs	r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e013      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e010      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d902      	bls.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d38:	2303      	movs	r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e00a      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d102      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e004      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b70      	cmp	r3, #112	; 0x70
 8001d4e:	d101      	bne.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 0207 	bic.w	r2, r3, #7
 8001d5c:	4909      	ldr	r1, [pc, #36]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d90:	2300      	movs	r3, #0
 8001d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d94:	2300      	movs	r3, #0
 8001d96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 809e 	beq.w	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	4a3f      	ldr	r2, [pc, #252]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	; 0x58
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ddc:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de8:	f7fe fe34 	bl	8000a54 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dee:	e009      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe fe30 	bl	8000a54 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d902      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	74fb      	strb	r3, [r7, #19]
        break;
 8001e02:	e005      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d15a      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01e      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d019      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e5e:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fdf0 	bl	8000a54 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00b      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe fdec 	bl	8000a54 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d902      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8001e8e:	e006      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ec      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001eba:	e009      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	74bb      	strb	r3, [r7, #18]
 8001ec0:	e006      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed0:	7c7b      	ldrb	r3, [r7, #17]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a6d      	ldr	r2, [pc, #436]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	4b68      	ldr	r3, [pc, #416]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef4:	f023 0203 	bic.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4964      	ldr	r1, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f10:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 020c 	bic.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	495c      	ldr	r1, [pc, #368]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4953      	ldr	r1, [pc, #332]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f54:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	494b      	ldr	r1, [pc, #300]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4942      	ldr	r1, [pc, #264]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	493a      	ldr	r1, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fba:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	4931      	ldr	r1, [pc, #196]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4929      	ldr	r1, [pc, #164]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4920      	ldr	r1, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	4918      	ldr	r1, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203e:	d105      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002084:	7cbb      	ldrb	r3, [r7, #18]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e040      	b.n	8002148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fb44 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fb0c 	bl	8002718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f8af 	bl	8002264 <UART_SetConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e01b      	b.n	8002148 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fb8b 	bl	800285c <UART_CheckIdleState>
 8002146:	4603      	mov	r3, r0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002164:	2b20      	cmp	r3, #32
 8002166:	d178      	bne.n	800225a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Transmit+0x24>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e071      	b.n	800225c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2221      	movs	r2, #33	; 0x21
 8002184:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002186:	f7fe fc65 	bl	8000a54 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a4:	d108      	bne.n	80021b8 <HAL_UART_Transmit+0x68>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	e003      	b.n	80021c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021c0:	e030      	b.n	8002224 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fbed 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e03c      	b.n	800225c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f4:	b292      	uxth	r2, r2
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3302      	adds	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e008      	b.n	8002212 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b292      	uxth	r2, r2
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1c8      	bne.n	80021c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2200      	movs	r2, #0
 8002238:	2140      	movs	r1, #64	; 0x40
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fbb6 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e005      	b.n	800225c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800225a:	2302      	movs	r3, #2
  }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002268:	b08a      	sub	sp, #40	; 0x28
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	431a      	orrs	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4313      	orrs	r3, r2
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b9e      	ldr	r3, [pc, #632]	; (800250c <UART_SetConfig+0x2a8>)
 8002294:	4013      	ands	r3, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800229c:	430b      	orrs	r3, r1
 800229e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a93      	ldr	r2, [pc, #588]	; (8002510 <UART_SetConfig+0x2ac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	4313      	orrs	r3, r2
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <UART_SetConfig+0x2b0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d126      	bne.n	800233c <UART_SetConfig+0xd8>
 80022ee:	4b8a      	ldr	r3, [pc, #552]	; (8002518 <UART_SetConfig+0x2b4>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d81b      	bhi.n	8002334 <UART_SetConfig+0xd0>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <UART_SetConfig+0xa0>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002315 	.word	0x08002315
 8002308:	08002325 	.word	0x08002325
 800230c:	0800231d 	.word	0x0800231d
 8002310:	0800232d 	.word	0x0800232d
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800231a:	e0ab      	b.n	8002474 <UART_SetConfig+0x210>
 800231c:	2302      	movs	r3, #2
 800231e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002322:	e0a7      	b.n	8002474 <UART_SetConfig+0x210>
 8002324:	2304      	movs	r3, #4
 8002326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800232a:	e0a3      	b.n	8002474 <UART_SetConfig+0x210>
 800232c:	2308      	movs	r3, #8
 800232e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002332:	e09f      	b.n	8002474 <UART_SetConfig+0x210>
 8002334:	2310      	movs	r3, #16
 8002336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800233a:	e09b      	b.n	8002474 <UART_SetConfig+0x210>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a76      	ldr	r2, [pc, #472]	; (800251c <UART_SetConfig+0x2b8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d138      	bne.n	80023b8 <UART_SetConfig+0x154>
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <UART_SetConfig+0x2b4>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d82d      	bhi.n	80023b0 <UART_SetConfig+0x14c>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <UART_SetConfig+0xf8>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	08002391 	.word	0x08002391
 8002360:	080023b1 	.word	0x080023b1
 8002364:	080023b1 	.word	0x080023b1
 8002368:	080023b1 	.word	0x080023b1
 800236c:	080023a1 	.word	0x080023a1
 8002370:	080023b1 	.word	0x080023b1
 8002374:	080023b1 	.word	0x080023b1
 8002378:	080023b1 	.word	0x080023b1
 800237c:	08002399 	.word	0x08002399
 8002380:	080023b1 	.word	0x080023b1
 8002384:	080023b1 	.word	0x080023b1
 8002388:	080023b1 	.word	0x080023b1
 800238c:	080023a9 	.word	0x080023a9
 8002390:	2300      	movs	r3, #0
 8002392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002396:	e06d      	b.n	8002474 <UART_SetConfig+0x210>
 8002398:	2302      	movs	r3, #2
 800239a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800239e:	e069      	b.n	8002474 <UART_SetConfig+0x210>
 80023a0:	2304      	movs	r3, #4
 80023a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023a6:	e065      	b.n	8002474 <UART_SetConfig+0x210>
 80023a8:	2308      	movs	r3, #8
 80023aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ae:	e061      	b.n	8002474 <UART_SetConfig+0x210>
 80023b0:	2310      	movs	r3, #16
 80023b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023b6:	e05d      	b.n	8002474 <UART_SetConfig+0x210>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <UART_SetConfig+0x2bc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d125      	bne.n	800240e <UART_SetConfig+0x1aa>
 80023c2:	4b55      	ldr	r3, [pc, #340]	; (8002518 <UART_SetConfig+0x2b4>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d016      	beq.n	80023fe <UART_SetConfig+0x19a>
 80023d0:	2b30      	cmp	r3, #48	; 0x30
 80023d2:	d818      	bhi.n	8002406 <UART_SetConfig+0x1a2>
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d00a      	beq.n	80023ee <UART_SetConfig+0x18a>
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d814      	bhi.n	8002406 <UART_SetConfig+0x1a2>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <UART_SetConfig+0x182>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d008      	beq.n	80023f6 <UART_SetConfig+0x192>
 80023e4:	e00f      	b.n	8002406 <UART_SetConfig+0x1a2>
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ec:	e042      	b.n	8002474 <UART_SetConfig+0x210>
 80023ee:	2302      	movs	r3, #2
 80023f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023f4:	e03e      	b.n	8002474 <UART_SetConfig+0x210>
 80023f6:	2304      	movs	r3, #4
 80023f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023fc:	e03a      	b.n	8002474 <UART_SetConfig+0x210>
 80023fe:	2308      	movs	r3, #8
 8002400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002404:	e036      	b.n	8002474 <UART_SetConfig+0x210>
 8002406:	2310      	movs	r3, #16
 8002408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800240c:	e032      	b.n	8002474 <UART_SetConfig+0x210>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <UART_SetConfig+0x2ac>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d12a      	bne.n	800246e <UART_SetConfig+0x20a>
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <UART_SetConfig+0x2b4>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002426:	d01a      	beq.n	800245e <UART_SetConfig+0x1fa>
 8002428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800242c:	d81b      	bhi.n	8002466 <UART_SetConfig+0x202>
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d00c      	beq.n	800244e <UART_SetConfig+0x1ea>
 8002434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002438:	d815      	bhi.n	8002466 <UART_SetConfig+0x202>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <UART_SetConfig+0x1e2>
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d008      	beq.n	8002456 <UART_SetConfig+0x1f2>
 8002444:	e00f      	b.n	8002466 <UART_SetConfig+0x202>
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800244c:	e012      	b.n	8002474 <UART_SetConfig+0x210>
 800244e:	2302      	movs	r3, #2
 8002450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002454:	e00e      	b.n	8002474 <UART_SetConfig+0x210>
 8002456:	2304      	movs	r3, #4
 8002458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800245c:	e00a      	b.n	8002474 <UART_SetConfig+0x210>
 800245e:	2308      	movs	r3, #8
 8002460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002464:	e006      	b.n	8002474 <UART_SetConfig+0x210>
 8002466:	2310      	movs	r3, #16
 8002468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800246c:	e002      	b.n	8002474 <UART_SetConfig+0x210>
 800246e:	2310      	movs	r3, #16
 8002470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <UART_SetConfig+0x2ac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f040 808a 	bne.w	8002594 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002484:	2b08      	cmp	r3, #8
 8002486:	d824      	bhi.n	80024d2 <UART_SetConfig+0x26e>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <UART_SetConfig+0x22c>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024b5 	.word	0x080024b5
 8002494:	080024d3 	.word	0x080024d3
 8002498:	080024bd 	.word	0x080024bd
 800249c:	080024d3 	.word	0x080024d3
 80024a0:	080024c3 	.word	0x080024c3
 80024a4:	080024d3 	.word	0x080024d3
 80024a8:	080024d3 	.word	0x080024d3
 80024ac:	080024d3 	.word	0x080024d3
 80024b0:	080024cb 	.word	0x080024cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b4:	f7ff fbdc 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80024b8:	61f8      	str	r0, [r7, #28]
        break;
 80024ba:	e010      	b.n	80024de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <UART_SetConfig+0x2c0>)
 80024be:	61fb      	str	r3, [r7, #28]
        break;
 80024c0:	e00d      	b.n	80024de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c2:	f7ff fb3d 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80024c6:	61f8      	str	r0, [r7, #28]
        break;
 80024c8:	e009      	b.n	80024de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ce:	61fb      	str	r3, [r7, #28]
        break;
 80024d0:	e005      	b.n	80024de <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80024dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8109 	beq.w	80026f8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d305      	bcc.n	8002502 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d912      	bls.n	8002528 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002508:	e0f6      	b.n	80026f8 <UART_SetConfig+0x494>
 800250a:	bf00      	nop
 800250c:	efff69f3 	.word	0xefff69f3
 8002510:	40008000 	.word	0x40008000
 8002514:	40013800 	.word	0x40013800
 8002518:	40021000 	.word	0x40021000
 800251c:	40004400 	.word	0x40004400
 8002520:	40004800 	.word	0x40004800
 8002524:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2200      	movs	r2, #0
 800252c:	461c      	mov	r4, r3
 800252e:	4615      	mov	r5, r2
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	022b      	lsls	r3, r5, #8
 800253a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800253e:	0222      	lsls	r2, r4, #8
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6849      	ldr	r1, [r1, #4]
 8002544:	0849      	lsrs	r1, r1, #1
 8002546:	2000      	movs	r0, #0
 8002548:	4688      	mov	r8, r1
 800254a:	4681      	mov	r9, r0
 800254c:	eb12 0a08 	adds.w	sl, r2, r8
 8002550:	eb43 0b09 	adc.w	fp, r3, r9
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002562:	4650      	mov	r0, sl
 8002564:	4659      	mov	r1, fp
 8002566:	f7fd fe31 	bl	80001cc <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4613      	mov	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002578:	d308      	bcc.n	800258c <UART_SetConfig+0x328>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002580:	d204      	bcs.n	800258c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	e0b5      	b.n	80026f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002592:	e0b1      	b.n	80026f8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259c:	d15d      	bne.n	800265a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800259e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d827      	bhi.n	80025f6 <UART_SetConfig+0x392>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <UART_SetConfig+0x348>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025d1 	.word	0x080025d1
 80025b0:	080025d9 	.word	0x080025d9
 80025b4:	080025e1 	.word	0x080025e1
 80025b8:	080025f7 	.word	0x080025f7
 80025bc:	080025e7 	.word	0x080025e7
 80025c0:	080025f7 	.word	0x080025f7
 80025c4:	080025f7 	.word	0x080025f7
 80025c8:	080025f7 	.word	0x080025f7
 80025cc:	080025ef 	.word	0x080025ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025d0:	f7ff fb4e 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 80025d4:	61f8      	str	r0, [r7, #28]
        break;
 80025d6:	e014      	b.n	8002602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025d8:	f7ff fb60 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
 80025dc:	61f8      	str	r0, [r7, #28]
        break;
 80025de:	e010      	b.n	8002602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <UART_SetConfig+0x4b0>)
 80025e2:	61fb      	str	r3, [r7, #28]
        break;
 80025e4:	e00d      	b.n	8002602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025e6:	f7ff faab 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80025ea:	61f8      	str	r0, [r7, #28]
        break;
 80025ec:	e009      	b.n	8002602 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f2:	61fb      	str	r3, [r7, #28]
        break;
 80025f4:	e005      	b.n	8002602 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d077      	beq.n	80026f8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005a      	lsls	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d916      	bls.n	8002652 <UART_SetConfig+0x3ee>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d212      	bcs.n	8002652 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	b29b      	uxth	r3, r3
 8002630:	f023 030f 	bic.w	r3, r3, #15
 8002634:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	b29a      	uxth	r2, r3
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	4313      	orrs	r3, r2
 8002646:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	8afa      	ldrh	r2, [r7, #22]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	e052      	b.n	80026f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002658:	e04e      	b.n	80026f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800265a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800265e:	2b08      	cmp	r3, #8
 8002660:	d827      	bhi.n	80026b2 <UART_SetConfig+0x44e>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <UART_SetConfig+0x404>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	0800268d 	.word	0x0800268d
 800266c:	08002695 	.word	0x08002695
 8002670:	0800269d 	.word	0x0800269d
 8002674:	080026b3 	.word	0x080026b3
 8002678:	080026a3 	.word	0x080026a3
 800267c:	080026b3 	.word	0x080026b3
 8002680:	080026b3 	.word	0x080026b3
 8002684:	080026b3 	.word	0x080026b3
 8002688:	080026ab 	.word	0x080026ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800268c:	f7ff faf0 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8002690:	61f8      	str	r0, [r7, #28]
        break;
 8002692:	e014      	b.n	80026be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002694:	f7ff fb02 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
 8002698:	61f8      	str	r0, [r7, #28]
        break;
 800269a:	e010      	b.n	80026be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <UART_SetConfig+0x4b0>)
 800269e:	61fb      	str	r3, [r7, #28]
        break;
 80026a0:	e00d      	b.n	80026be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a2:	f7ff fa4d 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80026a6:	61f8      	str	r0, [r7, #28]
        break;
 80026a8:	e009      	b.n	80026be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ae:	61fb      	str	r3, [r7, #28]
        break;
 80026b0:	e005      	b.n	80026be <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80026bc:	bf00      	nop
    }

    if (pclk != 0U)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d019      	beq.n	80026f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	085a      	lsrs	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d909      	bls.n	80026f2 <UART_SetConfig+0x48e>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d205      	bcs.n	80026f2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	e002      	b.n	80026f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002704:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	00f42400 	.word	0x00f42400

08002718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01a      	beq.n	800282e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002816:	d10a      	bne.n	800282e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b098      	sub	sp, #96	; 0x60
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800286c:	f7fe f8f2 	bl	8000a54 <HAL_GetTick>
 8002870:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d12e      	bne.n	80028de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f88c 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d021      	beq.n	80028de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e6      	bne.n	800289a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e062      	b.n	80029a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d149      	bne.n	8002980 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f856 	bl	80029ac <UART_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03c      	beq.n	8002980 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	623b      	str	r3, [r7, #32]
   return(result);
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
 8002926:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800292a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e6      	bne.n	8002906 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3308      	adds	r3, #8
 800293e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	e853 3f00 	ldrex	r3, [r3]
 8002946:	60fb      	str	r3, [r7, #12]
   return(result);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3308      	adds	r3, #8
 8002956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002958:	61fa      	str	r2, [r7, #28]
 800295a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	69b9      	ldr	r1, [r7, #24]
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	e841 2300 	strex	r3, r2, [r1]
 8002964:	617b      	str	r3, [r7, #20]
   return(result);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e5      	bne.n	8002938 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e011      	b.n	80029a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3758      	adds	r7, #88	; 0x58
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029bc:	e049      	b.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d045      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe f845 	bl	8000a54 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <UART_WaitOnFlagUntilTimeout+0x30>
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e048      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d031      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d110      	bne.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2208      	movs	r2, #8
 8002a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f838 	bl	8002a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e029      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2c:	d111      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f81e 	bl	8002a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e00f      	b.n	8002a72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0a6      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b095      	sub	sp, #84	; 0x54
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e6      	bne.n	8002a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e5      	bne.n	8002ab4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d118      	bne.n	8002b22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f023 0310 	bic.w	r3, r3, #16
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e6      	bne.n	8002af0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002b36:	bf00      	nop
 8002b38:	3754      	adds	r7, #84	; 0x54
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <memset>:
 8002b42:	4402      	add	r2, r0
 8002b44:	4603      	mov	r3, r0
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d100      	bne.n	8002b4c <memset+0xa>
 8002b4a:	4770      	bx	lr
 8002b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002b50:	e7f9      	b.n	8002b46 <memset+0x4>
	...

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4d0d      	ldr	r5, [pc, #52]	; (8002b8c <__libc_init_array+0x38>)
 8002b58:	4c0d      	ldr	r4, [pc, #52]	; (8002b90 <__libc_init_array+0x3c>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	2600      	movs	r6, #0
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	4d0b      	ldr	r5, [pc, #44]	; (8002b94 <__libc_init_array+0x40>)
 8002b66:	4c0c      	ldr	r4, [pc, #48]	; (8002b98 <__libc_init_array+0x44>)
 8002b68:	f000 f818 	bl	8002b9c <_init>
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	2600      	movs	r6, #0
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002c10 	.word	0x08002c10
 8002b90:	08002c10 	.word	0x08002c10
 8002b94:	08002c10 	.word	0x08002c10
 8002b98:	08002c14 	.word	0x08002c14

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr
